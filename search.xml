<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初识Markdown语言</title>
      <link href="/2019/01/24/%E5%88%9D%E8%AF%86Markdown%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/01/24/%E5%88%9D%E8%AF%86Markdown%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Markdown语言"><a href="#初识Markdown语言" class="headerlink" title="初识Markdown语言"></a>初识Markdown语言</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于新搭建个人博客，所以也是第一次接触Markdown语言，在简单了解基本语法后，特此在这里将常用语法做一个梳理。</p><blockquote><p><a href="https://www.appinn.com/markdown/index.html" target="_blank" rel="noopener">主要参考：Markdown语法说明（简体中文版）</a></p></blockquote><p>Markdown的目标是实现“易读易写”。Markdown语言提倡的是让使用者只要关注与书写，而不是停下来调整格式。</p><p>总之，Markdown的语法全是由一些符号组成，这些符号经过精细的挑选，起作用一目了然。</p><p>Markdown语法的目标是：成为一种适用于网络书写的语言。说起和网络有关的语言，大多数人会想起HTML，其实Markdown与HTML还是有一些关系的。使用Markdown语言最终也是将文本信息显示到网页上（浏览器），所以Markdown最后会被转换为HTML语言。所以说Markdown语言可以很好的兼容HTML。</p><blockquote><p><strong>这也就是为什么个人搭建博客需要使用Markdown来书写</strong></p></blockquote><ul><li>多数情况下搭建个人博客需要使用到一些前端的框架，比如<em>Node.js</em>书写的个人博客相当于是静态网页（书写的内容也都将转换为.html）</li></ul><h2 id="基本常用语法"><a href="#基本常用语法" class="headerlink" title="基本常用语法"></a>基本常用语法</h2><hr><blockquote><h4 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h4><pre><code>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行，普通段落不该用空格或制表符来缩进。也就是说正常一次向后书写形成的就是一个段落。换行也就是相当于我们在使用文本编辑器编辑文本时敲击回车按键，在Markdown中允许在段内换行（相当于另起一段），只需要在上一行文本结尾处敲击两次空格再回车，便可另起一行（相当于回车换行）。</code></pre></blockquote><hr><blockquote><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><pre><code>Markdown中支持两种标题书写格式</code></pre></blockquote><pre><code>1、 This is an H1    =============    This is an H2    -------------使用任意数量的=和-来构建标题（=最高阶标题、-第二阶标题）2、 # 这是 H1    ## 这是 H2    ###### 这是 H6使用#来构建标题，#的数量代表标题为几阶（也可以使用「闭合」的样式书写，比如 ## 这是一个二阶标题 ##）</code></pre><hr><blockquote><h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><pre><code>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。1、&gt; This is a blockquote with two paragraphs. Lorem ipsum        dolor sit amet,</code></pre><p>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>    正常书写<br>    2、&gt; This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.<br>    允许嵌套<br>    3、&gt; ## 这是一个标题。</p><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><pre><code>引用区块内也可以嵌套其他Markdown语法</code></pre><hr><blockquote><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><pre><code>Markdown 支持有序列表和无序列表。</code></pre></blockquote><pre><code>无序列表使用*、+、—作为标记。1、*   Red   *   Green   *   Blue2、+   Red   +   Green   +   Blue3、-   Red   -   Green   -   Blue有序列表使用数字加英文句号   1.  Bird   2.  McHale   3.  Parish需要注意的是，在正常输入数字加英文句号时（例如：1998.）Markdown会认为是有序列表，所以在书写时在英文句号前加反斜杠（1998\.）</code></pre><hr><blockquote><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><pre><code>所谓代码区块是在书写程序的时候我们不希望限制于Markdown的显示格式，在代码区块中书写就和正常在文本编辑器中书写一样简单。</code></pre></blockquote><pre><code>使用Markdown构建代码区块也非常简单，只需要使用一个制表符（Tab）。</code></pre><hr><blockquote><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><pre><code>Markdown中使用三个以上的*、—、_、来构建分割线。1、***2、---</code></pre></blockquote><pre><code>3、___</code></pre><hr><blockquote><h4 id="强调字符"><a href="#强调字符" class="headerlink" title="强调字符"></a>强调字符</h4><pre><code>Markdown中使用*、_进行强调*斜体***加粗**_斜体_</code></pre></blockquote><pre><code>__加粗__</code></pre><hr><blockquote><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><pre><code>Markdown中允许使用表格，其格式如下：|列表1|列表2||:-:|:-:||a|b||c|d|其中：|:-|为左对齐|:-:|为居中</code></pre></blockquote><pre><code>|-:|为右对齐</code></pre><hr><blockquote><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><pre><code>Markdown 支持两种形式的链接语法：1、[连接的文字描述](http://example.com/)2、[连接的文字描述][id]   [id]:http://example.com/</code></pre></blockquote><pre><code>第二种方式中的[id]可以出现在文本的任意处。</code></pre><hr><blockquote><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>Markdown作为一个文本编辑语言，直接插入图片是不可能的，所以 Markdown插入图片就参照了连接的做法（类似HTML中插入图片）。与连接相同，插入图片有两种格式：1、![图片信息](/path/to/imag.jpg)2、![图片信息][id]   [id]:/path/to/img.jpg</code></pre></blockquote><pre><code>值得注意的是，在插入图片时需要提供图片的URL，在书写个人博客的时候，如果存在少量图片，可以将其放在博客框架内，但是如果图片过多会导致博客加载变慢，所以推荐使用图床。</code></pre><hr><blockquote><p>以上便是Markdown常用的基本语法（日常书写博客是够了），如果还想显示更多的效果，可以使用HTML的相关语法功能（因为Markdown显示在网页上最终还是转换成静态页面）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Eclipse下初识Maven</title>
      <link href="/2019/01/17/%E5%9C%A8Eclipse%E4%B8%8B%E5%88%9D%E8%AF%86Maven/"/>
      <url>/2019/01/17/%E5%9C%A8Eclipse%E4%B8%8B%E5%88%9D%E8%AF%86Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="在Eclipse下初识Maven"><a href="#在Eclipse下初识Maven" class="headerlink" title="在Eclipse下初识Maven"></a>在Eclipse下初识Maven</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在学习Java时，你可能就听说过Maven，现在让我们一起在Eclipse平台上了解一下Maven。</p><blockquote><p>主要参考：<a href="https://blog.csdn.net/u012052268/article/details/78916196#eclipse%E4%BD%BF%E7%94%A8maven%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">eclipse使用maven教程</a>、<br><a href="http://maven.apache.org/what-is-maven.html" target="_blank" rel="noopener">Maven官网介绍</a></p></blockquote><hr><h2 id="什么是Maven？"><a href="#什么是Maven？" class="headerlink" title="什么是Maven？"></a>什么是Maven？</h2><p>Maven是由开源组织Apache软件基金会开发与管理的、基于项目对象模型（POM）的软件项目管理软件。（官网：Maven can manage a project’s build, reporting and documentation from a central piece of information）</p><p>Maven的目标：</p><ul><li>使构建的过程变得简单</li><li>提供统一的构建系统</li><li>提供优质的项目信息</li><li>提供最佳时间开发指南</li><li>允许易懂的新功能的迁移</li></ul><p>简单的说Maven就是一个大型的管理项目的仓库，我们可以从这个大仓库里下载自己所需的依赖（项目所需的jar包），也可以将自己的开源项目上传至这个大仓库(类似GitHub)。这也是我们主要使用Maven的原因，可以不需要自己手动下载配置项目所需要的依赖（jar包），只需要通过Maven的pom.xml文件配置一些所需项目依赖的信息，Maven就会自动将这些依赖下载至项目本地。</p><hr><h2 id="Maven怎么通过配置文件寻找项目依赖？"><a href="#Maven怎么通过配置文件寻找项目依赖？" class="headerlink" title="Maven怎么通过配置文件寻找项目依赖？"></a>Maven怎么通过配置文件寻找项目依赖？</h2><p>通常情况下，我们使用Maven来构建Java/Java Web，这里以Java项目为例。</p><p>首先，我们想通过配置文件来下载项目所需的依赖，我们必须将这个项目创建为Maven项目，使用Maven创建的项目，相当于在普通项目外包裹了一层，这一层就是一个“管家”，里面的项目原来是什么，还是什么，不会因为外部包裹的这一层而受到影响。而外面的这层“管家”是受pom.xml文件的内容而控制的。</p><p>现在我们回到原来手动寻找项目依赖时的步骤。我们之前在构建项目的时候，在选用项目依赖时，通常都会考虑这个依赖的名称、版本之类的信息。同样，Maven在寻找项目依赖时也需要这些相关的信息，所以我们需要将这些信息写入pom.xml</p><blockquote><p><strong>Maven使用三个标签来确定一个项目依赖：</strong></p><ol><li>&lt;groupId&gt;&lt;groupId/&gt;</li><li>&lt;artifactId&gt;&lt;artifactId/&gt;</li><li>&lt;version&gt;&lt;version/&gt;</li></ol></blockquote><p> <img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fza1dovrdxj30v30baab9.jpg" alt="如下图："></p><p>加入上面的pom.xml文件属于A项目，那么A项目肯定是一个maven项目，通过上面这三个属性能够找到junit对应版本的jar包，那么junit项目肯定也是一个maven项目，junit的maven项目中的pom.xml文件就会有三个标识符，比如像下图这样，然后别的maven项目就能通过这三个属性来找到junit项目的jar包了。所以，在每个创建的maven项目时都会要求写上这三个属性值的。<br><img src="http://wx3.sinaimg.cn/large/006Dr5U1ly1fza1jcjw0wj30ql038aa9.jpg" alt=""></p><hr><h2 id="下载、安装与配置Maven"><a href="#下载、安装与配置Maven" class="headerlink" title="下载、安装与配置Maven"></a>下载、安装与配置Maven</h2><blockquote><p>下载Maven <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p></blockquote><p>通过官网，下载最新的Maven<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzal85be09j318b0b00ui.jpg" alt=""></p><blockquote><p>安装Maven</p></blockquote><p>将下载好的Maven压缩包解压，你就会发现其实它和Tomcat很像，就是一个文件夹，不需要安装，只需要解压到你指定的目录下。（Maven是需要Java环境的，请提前装好JDK）<br><img src="http://wx2.sinaimg.cn/mw690/006Dr5U1ly1fzaldrty6dj30sf08k3z2.jpg" alt=""></p><blockquote><p>配置Maven</p></blockquote><p>观察Maven文件夹下的文件，我们不难发现，conf文件便是存放配置文件的地方。打开后我们会发现setting.xml文件，这个文件便是配置Maven的设置文件，打开后如图修改对应的内容。<br><img src="http://wx3.sinaimg.cn/large/006Dr5U1ly1fzalm6nx0ej30s105s3z3.jpg" alt=""></p><p><strong>(注意：&lt;localRepository&gt;标签最初是在其上面的注释内，注意将其移处注释后在修改)</strong></p><p>接下来，如果你以后想通过git、powershell等Terminal工具使用Maven，就需要配置环境变量，只使用IDE的可跳过。</p><p>Maven环境变量的配置与JDK相同，首先是新建系统变量MAVEN_HOME，将解压的Maven文件夹的目录填入。在新添加用户变量Path，将%MAVEN_HOME\bin%新建添加。</p><p>测试环境变量是否配置完成，在Terminal工具中输入mvn -version能够显示如下内容，证明配置成功。<br><img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fzam3fa4suj30rm05hmxj.jpg" alt=""></p><blockquote><p>在Eclipse中安装与配置</p></blockquote><p>在Eclipse中可以使用Eclipse官网提供的插件进行安装，也可以使用自己下载安装的Maven。（这里的操作与Tomcat相同）这里推荐使用外部下载安装的Maven。</p><p>首先打开Eclipse，打开窗口 -&gt; 首选项，如图添加：<br><img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fzamlczgvdj30pb0g5gmm.jpg" alt=""><br><img src="http://wx1.sinaimg.cn/large/006Dr5U1ly1fzamldl9blj30pb0g5dgx.jpg" alt=""></p><p>注意设置Local Repository，这个是Maven的本地仓位置，也就是之前在setting.xml中添加的那一条地址，在setting.xml中添加后者这里便不能修改。</p><hr><h2 id="在Eclipse中使用Maven"><a href="#在Eclipse中使用Maven" class="headerlink" title="在Eclipse中使用Maven"></a>在Eclipse中使用Maven</h2><p>打开Eclipse，新建一个Maven项目<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan1wss95j30le0hzq3s.jpg" alt=""></p><p>其中，quickstart为一般的Java项目，webapp为Java Web项目。<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan1x445dj30le0hz0t7.jpg" alt=""></p><p>正如前面所说，我们在这里也需要提供GroupId、ArtifactId、Version。</p><p><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan76v0zfj307z0cx74m.jpg" alt=""><br>以上是Maven的文件组成结构：</p><ul><li>pom.xml：用于定义或者添加jar包的依赖</li><li>src-main：用于存放java源文件</li><li>src-test：用于存放测试用例。</li><li>target：用来生成对应的class文件或发布的jar包。</li></ul><p>现在我们可以将所需要的项目依赖信息填入pom.xml中，在pom.xml页面右键，选择Run AS -&gt; Maven Bulid,即可通过Maven构建项目。</p><p>至此，我们通过Eclipse了解了Mave的安装与文件组成结构。对于经常使用Linux或者Terminal工具的用户，也可以使用命令行操作Maven。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
