<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript入门语法</title>
      <link href="/2019/04/12/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/04/12/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript-语法入门"><a href="#Javascript-语法入门" class="headerlink" title="Javascript 语法入门"></a>Javascript 语法入门</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。<br>（和Python一样，JS也是一种解释型的脚本语言）    </p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>JS是一种弱类型的语言（这一点与PHP、Python相同）</p><p><code>var a = 1</code></p><p>注意，JavaScript 的变量名区分大小写，A和a是两个不同的变量。</p><p>如果只是声明变量而没有赋值，则该变量的值是undefined。undefined是一个特殊的值，表示“无定义”。</p><p>如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。</p><p>关于变量名的命名方式，JS与其他语言没什么区别</p><p><code>1a  // 第一个字符不能是数字</code></p><p><code>***  // 标识符不能包含星号</code></p><p><code>a+b  // 标识符不能包含加号</code></p><p>以上均是不合法的命名（注意：在JS中，中文是合法的标识符）</p><p><code>var 这是一个变量 = 1</code></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre><code>在JS中提供了三种注释的方法：`` // 这是一行注释 ````/**/ 多行注释````&lt;!----&gt;继承了HTML的注释方式``（注意：需要注意的是，--&gt;只有在行首，才会被当成单行注释，否则会当作正常的运算。）</code></pre><h4 id="if-else-amp-amp-for-循环"><a href="#if-else-amp-amp-for-循环" class="headerlink" title="if else &amp;&amp; for 循环"></a>if else &amp;&amp; for 循环</h4><pre><code>任何程序都逃脱不了if else &amp;&amp; for 循环，JS中的循环判断与其他语言没有什么差别注意，if后面的表达式之中，不要混淆赋值表达式（=）、严格相等运算符（===）和相等运算符（==）。尤其是赋值表达式不具有比较作用。</code></pre><h4 id="标签（label）"><a href="#标签（label）" class="headerlink" title="标签（label）"></a>标签（label）</h4><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下</p><p>标签可以是任意的标识符，但不能是保留字（标签通常与break、continue配合使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top: </span><br><span class="line"> for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">   for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">     if (i === 1 &amp;&amp; j === 1) continue top;</span><br><span class="line">     console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><pre><code>上面代码中，continue命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果continue语句后面不使用标签，则只能进入下一轮的内层循环。</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>JavaScript 语言的每一个值，都属于某一种数据类型。这也就是弱类型语言在赋值时可判断变量的数据类型的原因。</p><p>在基础的JS语言中将会涉及到六种数据类型（ES6中有新添加了一种）</p><ul><li>数值（number）：整数和小数（比如1和3.14）</li><li>字符串（string）：文本（比如Hello World）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）</li><li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li><li>null：表示空值，即此处的值为空。</li><li><p>对象（object）：各种值组成的集合。</p><p>  其中，对象（object）右可分为：狭义对象、数组、函数（函数可以返回数据，所以在JS中被称为对象）</p></li></ul><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>JavaScript 有三种方法，可以确定一个值到底是什么类型</p><ul><li>typeof运算符</li><li>instanceof运算符</li><li>Object.prototype.toString方法</li></ul><p>typeof运算符可以返回一个值的数据类型。</p><p>数值、字符串、布尔值分别返回number、string、boolean，函数返回funcation，undefined返回undefined，<br>对象返回Object</p><p>在实际的编程中可用其进行条件判断，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (typeof v === &quot;undefined&quot;) &#123;</span><br><span class="line"> // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>####关于null与undefine的几点说明</p><p>null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，<br>在实际的编程使用的过程中效果几乎没区别。</p><p>要是非要说个一二三，那便要谈及历史问题：</p><pre><code>在第一版的JavaScript中将null规定为Object类型，表示“无&quot;(与C语言中类似，C语言中也根据编译环境来区分)null可转换为数字0，而undefined在转为数值类型时将是NaN</code></pre><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。<br>所以，1与1.0是相同的，是同一个数。</p><p>所以在使用的时候，小心精度问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2 === 0.3</span><br><span class="line">// false</span><br><span class="line"></span><br><span class="line">0.3 / 0.1</span><br><span class="line">// 2.9999999999999996</span><br><span class="line"></span><br><span class="line">(0.3 - 0.2) === (0.2 - 0.1)</span><br><span class="line">// false</span><br></pre></td></tr></table></figure></p><p>需要注意几点：</p><ol><li><strong><em>NaN</em></strong>是 JavaScript 的特殊值，表示“非数字”（Not a Number），<br>主要出现在将字符串解析成数字出错的场合。</li><li><strong><em>Infinity</em></strong>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，<br>或一个负的数值太小，无法表示；另一种是非0数值除以0，得到Infinity。</li></ol><h4 id="几种与数值相关的方法"><a href="#几种与数值相关的方法" class="headerlink" title="几种与数值相关的方法"></a>几种与数值相关的方法</h4><ul><li><p>parseInt()</p><p> parseInt方法用于将字符串转为整数。</p></li><li><p>parseFloat() </p><p>parseFloat方法用于将一个字符串转为浮点数。</p></li><li><p>isNaN()</p><p>isNaN方法可以用来判断一个值是否为NaN。</p></li><li><p>isFinite()<br>isFinite方法返回一个布尔值，表示某个值是否为正常的数值。</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>用单引号或双引号包裹起来的多个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;abc&apos;</span><br><span class="line">&quot;abc&quot;</span><br><span class="line">//(推荐使用单引号)</span><br></pre></td></tr></table></figure></p><p>单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。</p><p>但是如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，<br>用来转义。双引号字符串内部使用双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;Did she say \&apos;Hello\&apos;?&apos;</span><br><span class="line">// &quot;Did she say &apos;Hello&apos;?&quot;</span><br><span class="line"></span><br><span class="line">&quot;Did she say \&quot;Hello\&quot;?&quot;</span><br><span class="line">// &quot;Did she say &quot;Hello&quot;?&quot;</span><br></pre></td></tr></table></figure></p><p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var s = &apos;hello&apos;;</span><br><span class="line">s[1] // &quot;e&quot;</span><br><span class="line">s[4] // &quot;o&quot;</span><br><span class="line"></span><br><span class="line">// 直接对字符串使用方括号运算符</span><br><span class="line">&apos;hello&apos;[1] // &quot;e&quot;</span><br></pre></td></tr></table></figure></p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> foo: &apos;Hello&apos;,</span><br><span class="line"> bar: &apos;World&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，<br>通常把这个属性称为“方法”，它可以像函数那样调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> p: function (x) &#123;</span><br><span class="line">   return 2 * x;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.p(1) // 2</span><br></pre></td></tr></table></figure><p><strong><em>特别说明：</em></strong></p><p>在JavaScript中对象采用大括号来表示，这导致了一个问题：如果行首是一个大括号，<br>它到底是表达式还是语句？</p><p><code>{ foo: 123 }</code></p><p>为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，<br>无法确定是对象还是代码块，一律解释为代码块。</p><p>如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，<br>只能是表达式，所以确保大括号只能解释为对象。</p><p><code>({ foo: 123 })</code></p><h4 id="关于对象的操作"><a href="#关于对象的操作" class="headerlink" title="关于对象的操作"></a>关于对象的操作</h4><p>在JavaScript中操作对象的方法有两种：一种是使用点运算符，还有一种是使用方括号运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> p: &apos;Hello World&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.p // &quot;Hello World&quot;</span><br><span class="line">obj[&apos;p&apos;] // &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></p><p>不过一般都使用点运算符</p><p>利用for…in 循环进行属性的遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line"></span><br><span class="line">for (var i in obj) &#123;</span><br><span class="line"> console.log(&apos;键名：&apos;, i);</span><br><span class="line"> console.log(&apos;键值：&apos;, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 键名： a</span><br><span class="line">// 键值： 1</span><br><span class="line">// 键名： b</span><br><span class="line">// 键值： 2</span><br><span class="line">// 键名： c</span><br><span class="line">// 键值： 3</span><br></pre></td></tr></table></figure></p><p>for…in循环有两个使用注意点:</p><p>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。<br>它不仅遍历对象自身的属性，还遍历继承的属性。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>在JavaScript中一般使用三种方法来构造函数：</p><ol><li><p>function 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function print(s) &#123;</span><br><span class="line"> console.log(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var print = function(s) &#123;</span><br><span class="line"> console.log(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Function 构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var add = new Function(</span><br><span class="line"> &apos;x&apos;,</span><br><span class="line"> &apos;y&apos;,</span><br><span class="line"> &apos;return x + y&apos;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line">function add(x, y) &#123;</span><br><span class="line"> return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>与其他编程语言相同。JavaScript（ES5）的函数作用域有两种：</p><p>一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；<br>另一种是函数作用域，变量只在函数内部存在。</p><p>在JavaScript中有一个较为重要的概念为闭包，这里先不去介绍，后续会专题讲解。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br></pre></td></tr></table></figure></p><p>其实在JavaScript中将数字当作对象处理，我们可以使用typeof来观察类型</p><h4 id="特别说明-与-运算符"><a href="#特别说明-与-运算符" class="headerlink" title="特别说明 == 与 === 运算符"></a>特别说明 == 与 === 运算符</h4><p>简单说，它们的区别是相等运算符（==）比较两个值是否相等，<br>严格相等运算符（===）比较它们是否为“同一个值”。如果两个值不是同一类型，<br>严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，<br>再用严格相等运算符进行比较。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 === &quot;1&quot; // false</span><br><span class="line">true === &quot;true&quot; // false</span><br><span class="line">1 === 0x1 // true</span><br></pre></td></tr></table></figure></p><h4 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h4><p>这个运算符的主要用途是浏览器的书签工具（Bookmarklet），以及在超级链接中插入代码防止网页跳转。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript: void(document.form.submit())&quot;&gt;</span><br><span class="line"> 提交</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>当用户点击提交按钮后，页面并不会跳转。</p><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><ol><li><strong><em>Number()</em></strong></li></ol><p>使用Number函数，可以将任意类型的值转化成数值。</p><ol start="2"><li><strong><em>String()</em></strong></li></ol><p>String函数可以将任意类型的值转化成字符串，转换规则如下。</p><ol start="3"><li><strong><em>Boolean()</em></strong></li></ol><p>Boolean函数可以将任意类型的值转为布尔值。</p><h4 id="错误与异常处理"><a href="#错误与异常处理" class="headerlink" title="错误与异常处理"></a>错误与异常处理</h4><ul><li>错误对象</li></ul><p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供Error构造函数，<br>所有抛出的错误都是这个构造函数的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var err = new Error(&apos;出错了&apos;);</span><br><span class="line">err.message // &quot;出错了&quot;</span><br></pre></td></tr></table></figure></p><ul><li><p>throw 语句<br>throw语句的作用是手动中断程序执行，抛出一个错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (x &lt;= 0) &#123;</span><br><span class="line">  throw new Error(&apos;x 必须为正数&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>try…catch 结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line"> throw new Error(&apos;出错了!&apos;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line"> console.log(e.name + &quot;: &quot; + e.message);</span><br><span class="line"> console.log(e.stack);</span><br><span class="line">&#125;</span><br><span class="line">// Error: 出错了!</span><br><span class="line">//   at &lt;anonymous&gt;:3:9</span><br></pre></td></tr></table></figure></li><li><p>finally 代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function cleansUp() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    throw new Error(&apos;出错了……&apos;);</span><br><span class="line">    console.log(&apos;此行不会执行&apos;);</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    console.log(&apos;完成清理工作&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cleansUp()</span><br></pre></td></tr></table></figure></li></ul><h3 id="console-对象与控制台"><a href="#console-对象与控制台" class="headerlink" title="console 对象与控制台"></a>console 对象与控制台</h3><ul><li>console 对象</li></ul><p>console对象是 JavaScript 的原生对象，它有点像 Unix 系统的标准输出stdout和标准错误stderr，<br>可以输出各种信息到控制台，并且还提供了很多有用的辅助方法。</p><p>在浏览器的开发者工具下通常可以找到控制台</p><p>按 F12 或者Control + Shift + j（PC）</p><ul><li>console 对象的静态方法</li></ul><p><strong><em>console.log()，console.info()</em></strong></p><p>console.log方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。</p><p>console.info是console.log方法的别名，用法完全一样。只不过console.info方法会在输出信息的前面，加上一个蓝色图标。</p><p>console.debug方法与console.log方法类似，会在控制台输出调试信息。但是，默认情况下，console.debug输出的信息不会显示，</p><ul><li>debugger 语句</li></ul><p>debugger语句主要用于除错，作用是设置断点。如果有正在运行的除错工具，程序运行到debugger语句时会自动停下。如果没有除错工具，debugger语句不会产生任何结果，JavaScript 引擎自动跳过这一句。</p><p>Chrome 浏览器中，当代码运行到debugger语句时，就会暂停运行，自动打开脚本源码界面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 5; i++)&#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  if (i === 2) debugger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码打印出0，1，2以后，就会暂停，自动打开源码界面，等待进一步处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术-基础</title>
      <link href="/2019/02/23/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/23/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java核心技术-基础语法"><a href="#Java核心技术-基础语法" class="headerlink" title="Java核心技术-基础语法"></a>Java核心技术-基础语法</h1><blockquote><p>主要记录一些Java核心技术一书中的基础语法</p></blockquote><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>Arrays.toString()方法 （按字符串直接返回数组内容）</p><p>在遍历数组元素时可以使用for each，全部遍历数组元素。其中可以使用Arrays类的toString方法，用Arrays.toString(a),返回一个包含数组元素的字符串。</p></li><li><p>允许长度为0的数组</p><p>如果某方法需要返回一个数组，但碰巧结果为空，则可以使用长度为0<br>的数组 (new elementType[0]) </p><p><strong>注意：数组长度为0与null不同</strong></p></li></ul><ul><li><p>数组拷贝</p><p>在Java中允许对数组进行拷贝，即两个对象均引用内存中的同一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原数组smallPrimes=&#123;2,3,5,7,11,12&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] luckNumbers = smallPrimes;</span><br><span class="line">luckNumbers[<span class="number">5</span>] = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//数组拷贝还可以使用Arrays.copyOf();</span></span><br><span class="line"><span class="keyword">int</span>[] copiedLuckNumbers = Arrays.copyOf(luckNumber,<span class="number">2</span>*luckNumber.length);</span><br><span class="line"><span class="comment">//其中第一个参数为需要拷贝的原数组，第二个参数为拷贝后新数组的长度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  如果数组元素的是数值类型，那么多余的元素将被赋值为0；如果元素时布尔类型将被赋值false。（都将会被赋值为Java中各个类型的默认值）。相反，如果长度小于原始数组的长度，则只拷贝最前面的数据元素。</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure></li><li><p>命令行参数</p><p>在Java中的main方法基本上都是带有一个String类型的数组作为main方法的参数，这说明main方法将接受到一个字符串数组，也就是目录参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (args .length == <span class="number">0</span> || args[<span class="number">0</span>].equals(<span class="string">"-h"</span>))&#123;</span><br><span class="line">         System.out.println(<span class="string">"HELLO,"</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">"-g"</span>))&#123;</span><br><span class="line">         System.out.println(<span class="string">"Goodbye,"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">         System.out.print(<span class="string">" "</span> + args[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.printn(<span class="string">"!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真对命令行运行的方式：java Message -g cruel world</p><p><em>运行结果：Goodbye，cruel world！</em></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 语言基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Markdown语言</title>
      <link href="/2019/01/24/%E5%88%9D%E8%AF%86Markdown%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/01/24/%E5%88%9D%E8%AF%86Markdown%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Markdown语言"><a href="#初识Markdown语言" class="headerlink" title="初识Markdown语言"></a>初识Markdown语言</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于新搭建个人博客，所以也是第一次接触Markdown语言，在简单了解基本语法后，特此在这里将常用语法做一个梳理。</p><blockquote><p><a href="https://www.appinn.com/markdown/index.html" target="_blank" rel="noopener">主要参考：Markdown语法说明（简体中文版）</a></p></blockquote><p>Markdown的目标是实现“易读易写”。Markdown语言提倡的是让使用者只要关注与书写，而不是停下来调整格式。</p><p>总之，Markdown的语法全是由一些符号组成，这些符号经过精细的挑选，起作用一目了然。</p><p>Markdown语法的目标是：成为一种适用于网络书写的语言。说起和网络有关的语言，大多数人会想起HTML，其实Markdown与HTML还是有一些关系的。使用Markdown语言最终也是将文本信息显示到网页上（浏览器），所以Markdown最后会被转换为HTML语言。所以说Markdown语言可以很好的兼容HTML。</p><blockquote><p><strong>这也就是为什么个人搭建博客需要使用Markdown来书写</strong></p></blockquote><ul><li>多数情况下搭建个人博客需要使用到一些前端的框架，比如<em>Node.js</em>书写的个人博客相当于是静态网页（书写的内容也都将转换为.html）</li></ul><h2 id="基本常用语法"><a href="#基本常用语法" class="headerlink" title="基本常用语法"></a>基本常用语法</h2><hr><blockquote><h4 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h4><pre><code>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行，普通段落不该用空格或制表符来缩进。也就是说正常一次向后书写形成的就是一个段落。换行也就是相当于我们在使用文本编辑器编辑文本时敲击回车按键，在Markdown中允许在段内换行（相当于另起一段），只需要在上一行文本结尾处敲击两次空格再回车，便可另起一行（相当于回车换行）。</code></pre></blockquote><hr><blockquote><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><pre><code>Markdown中支持两种标题书写格式</code></pre></blockquote><pre><code>1、 This is an H1    =============    This is an H2    -------------使用任意数量的=和-来构建标题（=最高阶标题、-第二阶标题）2、 # 这是 H1    ## 这是 H2    ###### 这是 H6使用#来构建标题，#的数量代表标题为几阶（也可以使用「闭合」的样式书写，比如 ## 这是一个二阶标题 ##）</code></pre><hr><blockquote><h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><pre><code>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。1、&gt; This is a blockquote with two paragraphs. Lorem ipsum        dolor sit amet,</code></pre><p>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>    正常书写<br>    2、&gt; This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.<br>    允许嵌套<br>    3、&gt; ## 这是一个标题。</p><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><pre><code>引用区块内也可以嵌套其他Markdown语法</code></pre><hr><blockquote><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><pre><code>Markdown 支持有序列表和无序列表。</code></pre></blockquote><pre><code>无序列表使用*、+、—作为标记。1、*   Red   *   Green   *   Blue2、+   Red   +   Green   +   Blue3、-   Red   -   Green   -   Blue有序列表使用数字加英文句号   1.  Bird   2.  McHale   3.  Parish需要注意的是，在正常输入数字加英文句号时（例如：1998.）Markdown会认为是有序列表，所以在书写时在英文句号前加反斜杠（1998\.）</code></pre><hr><blockquote><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><pre><code>所谓代码区块是在书写程序的时候我们不希望限制于Markdown的显示格式，在代码区块中书写就和正常在文本编辑器中书写一样简单。</code></pre></blockquote><pre><code>使用Markdown构建代码区块也非常简单，只需要使用一个制表符（Tab）。</code></pre><hr><blockquote><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><pre><code>Markdown中使用三个以上的*、—、_、来构建分割线。1、***2、---</code></pre></blockquote><pre><code>3、___</code></pre><hr><blockquote><h4 id="强调字符"><a href="#强调字符" class="headerlink" title="强调字符"></a>强调字符</h4><pre><code>Markdown中使用*、_进行强调*斜体***加粗**_斜体_</code></pre></blockquote><pre><code>__加粗__</code></pre><hr><blockquote><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><pre><code>Markdown中允许使用表格，其格式如下：|列表1|列表2||:-:|:-:||a|b||c|d|其中：|:-|为左对齐|:-:|为居中</code></pre></blockquote><pre><code>|-:|为右对齐</code></pre><hr><blockquote><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><pre><code>Markdown 支持两种形式的链接语法：1、[连接的文字描述](http://example.com/)2、[连接的文字描述][id]   [id]:http://example.com/</code></pre></blockquote><pre><code>第二种方式中的[id]可以出现在文本的任意处。</code></pre><hr><blockquote><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>Markdown作为一个文本编辑语言，直接插入图片是不可能的，所以 Markdown插入图片就参照了连接的做法（类似HTML中插入图片）。与连接相同，插入图片有两种格式：1、![图片信息](/path/to/imag.jpg)2、![图片信息][id]   [id]:/path/to/img.jpg</code></pre></blockquote><pre><code>值得注意的是，在插入图片时需要提供图片的URL，在书写个人博客的时候，如果存在少量图片，可以将其放在博客框架内，但是如果图片过多会导致博客加载变慢，所以推荐使用图床。</code></pre><hr><blockquote><p>以上便是Markdown常用的基本语法（日常书写博客是够了），如果还想显示更多的效果，可以使用HTML的相关语法功能（因为Markdown显示在网页上最终还是转换成静态页面）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Eclipse下初识Maven</title>
      <link href="/2019/01/17/%E5%9C%A8Eclipse%E4%B8%8B%E5%88%9D%E8%AF%86Maven/"/>
      <url>/2019/01/17/%E5%9C%A8Eclipse%E4%B8%8B%E5%88%9D%E8%AF%86Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="在Eclipse下初识Maven"><a href="#在Eclipse下初识Maven" class="headerlink" title="在Eclipse下初识Maven"></a>在Eclipse下初识Maven</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在学习Java时，你可能就听说过Maven，现在让我们一起在Eclipse平台上了解一下Maven。</p><blockquote><p>主要参考：<a href="https://blog.csdn.net/u012052268/article/details/78916196#eclipse%E4%BD%BF%E7%94%A8maven%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">eclipse使用maven教程</a>、<br><a href="http://maven.apache.org/what-is-maven.html" target="_blank" rel="noopener">Maven官网介绍</a></p></blockquote><hr><h2 id="什么是Maven？"><a href="#什么是Maven？" class="headerlink" title="什么是Maven？"></a>什么是Maven？</h2><p>Maven是由开源组织Apache软件基金会开发与管理的、基于项目对象模型（POM）的软件项目管理软件。（官网：Maven can manage a project’s build, reporting and documentation from a central piece of information）</p><p>Maven的目标：</p><ul><li>使构建的过程变得简单</li><li>提供统一的构建系统</li><li>提供优质的项目信息</li><li>提供最佳时间开发指南</li><li>允许易懂的新功能的迁移</li></ul><p>简单的说Maven就是一个大型的管理项目的仓库，我们可以从这个大仓库里下载自己所需的依赖（项目所需的jar包），也可以将自己的开源项目上传至这个大仓库(类似GitHub)。这也是我们主要使用Maven的原因，可以不需要自己手动下载配置项目所需要的依赖（jar包），只需要通过Maven的pom.xml文件配置一些所需项目依赖的信息，Maven就会自动将这些依赖下载至项目本地。</p><hr><h2 id="Maven怎么通过配置文件寻找项目依赖？"><a href="#Maven怎么通过配置文件寻找项目依赖？" class="headerlink" title="Maven怎么通过配置文件寻找项目依赖？"></a>Maven怎么通过配置文件寻找项目依赖？</h2><p>通常情况下，我们使用Maven来构建Java/Java Web，这里以Java项目为例。</p><p>首先，我们想通过配置文件来下载项目所需的依赖，我们必须将这个项目创建为Maven项目，使用Maven创建的项目，相当于在普通项目外包裹了一层，这一层就是一个“管家”，里面的项目原来是什么，还是什么，不会因为外部包裹的这一层而受到影响。而外面的这层“管家”是受pom.xml文件的内容而控制的。</p><p>现在我们回到原来手动寻找项目依赖时的步骤。我们之前在构建项目的时候，在选用项目依赖时，通常都会考虑这个依赖的名称、版本之类的信息。同样，Maven在寻找项目依赖时也需要这些相关的信息，所以我们需要将这些信息写入pom.xml</p><blockquote><p><strong>Maven使用三个标签来确定一个项目依赖：</strong></p><ol><li>&lt;groupId&gt;&lt;groupId/&gt;</li><li>&lt;artifactId&gt;&lt;artifactId/&gt;</li><li>&lt;version&gt;&lt;version/&gt;</li></ol></blockquote><p> <img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fza1dovrdxj30v30baab9.jpg" alt="如下图："></p><p>加入上面的pom.xml文件属于A项目，那么A项目肯定是一个maven项目，通过上面这三个属性能够找到junit对应版本的jar包，那么junit项目肯定也是一个maven项目，junit的maven项目中的pom.xml文件就会有三个标识符，比如像下图这样，然后别的maven项目就能通过这三个属性来找到junit项目的jar包了。所以，在每个创建的maven项目时都会要求写上这三个属性值的。<br><img src="http://wx3.sinaimg.cn/large/006Dr5U1ly1fza1jcjw0wj30ql038aa9.jpg" alt=""></p><hr><h2 id="下载、安装与配置Maven"><a href="#下载、安装与配置Maven" class="headerlink" title="下载、安装与配置Maven"></a>下载、安装与配置Maven</h2><blockquote><p>下载Maven <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p></blockquote><p>通过官网，下载最新的Maven<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzal85be09j318b0b00ui.jpg" alt=""></p><blockquote><p>安装Maven</p></blockquote><p>将下载好的Maven压缩包解压，你就会发现其实它和Tomcat很像，就是一个文件夹，不需要安装，只需要解压到你指定的目录下。（Maven是需要Java环境的，请提前装好JDK）<br><img src="http://wx2.sinaimg.cn/mw690/006Dr5U1ly1fzaldrty6dj30sf08k3z2.jpg" alt=""></p><blockquote><p>配置Maven</p></blockquote><p>观察Maven文件夹下的文件，我们不难发现，conf文件便是存放配置文件的地方。打开后我们会发现setting.xml文件，这个文件便是配置Maven的设置文件，打开后如图修改对应的内容。<br><img src="http://wx3.sinaimg.cn/large/006Dr5U1ly1fzalm6nx0ej30s105s3z3.jpg" alt=""></p><p><strong>(注意：&lt;localRepository&gt;标签最初是在其上面的注释内，注意将其移处注释后在修改)</strong></p><p>接下来，如果你以后想通过git、powershell等Terminal工具使用Maven，就需要配置环境变量，只使用IDE的可跳过。</p><p>Maven环境变量的配置与JDK相同，首先是新建系统变量MAVEN_HOME，将解压的Maven文件夹的目录填入。在新添加用户变量Path，将%MAVEN_HOME\bin%新建添加。</p><p>测试环境变量是否配置完成，在Terminal工具中输入mvn -version能够显示如下内容，证明配置成功。<br><img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fzam3fa4suj30rm05hmxj.jpg" alt=""></p><blockquote><p>在Eclipse中安装与配置</p></blockquote><p>在Eclipse中可以使用Eclipse官网提供的插件进行安装，也可以使用自己下载安装的Maven。（这里的操作与Tomcat相同）这里推荐使用外部下载安装的Maven。</p><p>首先打开Eclipse，打开窗口 -&gt; 首选项，如图添加：<br><img src="http://wx4.sinaimg.cn/large/006Dr5U1ly1fzamlczgvdj30pb0g5gmm.jpg" alt=""><br><img src="http://wx1.sinaimg.cn/large/006Dr5U1ly1fzamldl9blj30pb0g5dgx.jpg" alt=""></p><p>注意设置Local Repository，这个是Maven的本地仓位置，也就是之前在setting.xml中添加的那一条地址，在setting.xml中添加后者这里便不能修改。</p><hr><h2 id="在Eclipse中使用Maven"><a href="#在Eclipse中使用Maven" class="headerlink" title="在Eclipse中使用Maven"></a>在Eclipse中使用Maven</h2><p>打开Eclipse，新建一个Maven项目<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan1wss95j30le0hzq3s.jpg" alt=""></p><p>其中，quickstart为一般的Java项目，webapp为Java Web项目。<br><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan1x445dj30le0hz0t7.jpg" alt=""></p><p>正如前面所说，我们在这里也需要提供GroupId、ArtifactId、Version。</p><p><img src="http://wx2.sinaimg.cn/large/006Dr5U1ly1fzan76v0zfj307z0cx74m.jpg" alt=""><br>以上是Maven的文件组成结构：</p><ul><li>pom.xml：用于定义或者添加jar包的依赖</li><li>src-main：用于存放java源文件</li><li>src-test：用于存放测试用例。</li><li>target：用来生成对应的class文件或发布的jar包。</li></ul><p>现在我们可以将所需要的项目依赖信息填入pom.xml中，在pom.xml页面右键，选择Run AS -&gt; Maven Bulid,即可通过Maven构建项目。</p><p>至此，我们通过Eclipse了解了Mave的安装与文件组成结构。对于经常使用Linux或者Terminal工具的用户，也可以使用命令行操作Maven。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
